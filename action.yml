name: 'Build and Push Container Images'
description: 'Builds images on PRs and builds/pushes to registries on default branch and merge queues'

inputs:
  # Image configuration
  image_name:
    description: 'Base image name (e.g., myorg/myapp)'
    required: true

  dockerfile_path:
    description: 'Path to Dockerfile'
    required: false
    default: './Dockerfile'

  build_context:
    description: 'Build context directory'
    required: false
    default: '.'

  build_target:
    description: 'Docker build target stage'
    required: false
    default: ''

  build_args:
    description: 'Docker build arguments (multiline)'
    required: false
    default: ''

  release_branches:
    description: 'List of release branch names, separated by commas'
    required: false
    default: 'release,releases'

  # Registry configuration
  ghcr:
    description: 'Enable GitHub Container Registry'
    required: false
    default: 'true'

  ghcr_image_name:
    description: 'GHCR image name (defaults to ghcr.io/{owner}/{image_name})'
    required: false
    default: ''

  publish_on_pr:
    description: 'Publish images on pull requests (SHA tags only)'
    required: false
    default: 'false'

  google_ar:
    description: 'Enable Google Artifact Registry'
    required: false
    default: 'false'

  google_ar_image_name:
    description: 'Google Artifact Registry image name'
    required: false
    default: ''

  tags:
    description: 'Additional tags to apply to the image'
    required: false
    default: ''

  tag_prefix:
    description: 'Tag prefix'
    required: false
    default: ''

  tag_suffix:
    description: 'Tag suffix'
    required: false
    default: ''

  google_workload_identity_provider:
    description: 'Google Workload Identity Provider'
    required: false
    default: ''

  google_service_account:
    description: 'Google Service Account'
    required: false
    default: ''

  # Build configuration
  platforms:
    description: 'platforms to build (e.g., linux/amd64, linux/arm64)'
    required: false
    default: 'linux/amd64'

  outputs:
    description: 'List of output destinations (e.g., type=docker, type=image,name=myimage)'
    required: false
    default: ''

  tag_latest:
    description: 'Tag latest'
    required: false
    default: 'true'

  tag_nightly:
    description: 'Tag nightly'
    required: false
    default: 'true'

  cache_from:
    description: 'Cache sources for Docker build (e.g., type=gha,scope=buildcache)'
    required: false
    default: 'type=gha,scope=buildcache'

  cache_to:
    description: 'Cache destinations for Docker build (e.g., type=gha,mode=max,scope=buildcache)'
    required: false
    default: 'type=gha,mode=max,scope=buildcache'


outputs:
  ghcr_image_url:
    description: 'Full GHCR image URL with primary tag (e.g., ghcr.io/owner/repo:sha-abc123)'
    value: ${{ steps.output-urls.outputs.ghcr_image_url }}

  gar_image_url:
    description: 'Full GAR image URL with primary tag'
    value: ${{ steps.output-urls.outputs.gar_image_url }}

runs:
  using: 'composite'
  steps:
    - name: Setup build metadata
      id: setup
      shell: bash
      run: |
        # Setup image names
        GHCR_IMAGE_NAME="${{ inputs.ghcr_image_name }}"
        if [[ -z "$GHCR_IMAGE_NAME" ]]; then
          GHCR_IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}"
        fi
        echo "ghcr_image_name=$GHCR_IMAGE_NAME" >> $GITHUB_OUTPUT

        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "platforms: ${{ inputs.platforms }}"
        if [[ "${{ inputs.google_ar }}" == "true" ]]; then
          if [[ -z "${{ inputs.google_ar_image_name }}" ]]; then
            echo "Error: Google Artifact Registry image name is required when publishing to Google Artifact Registry is enabled"
            exit 1
          fi
          echo "GAR Image: ${{ inputs.google_ar_image_name }}"
        fi
        if [[ "${{ inputs.ghcr }}" == "true" ]]; then
          echo "GHCR Image: $GHCR_IMAGE_NAME"
        fi

        # Helper function to determine if we're targeting the default branch
        IS_DEFAULT_BRANCH="false"
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]]; then
          IS_DEFAULT_BRANCH="true"
        elif [[ "${{ github.event_name }}" == "merge_group" && "${{ github.event.merge_group.base_ref }}" == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
          IS_DEFAULT_BRANCH="true"
        fi

        # Iterate over release branch names. In pseudocode:
        #   for branch in ref_name.split(','):
        #     if branch.startswith(branch + "/"):
        #       IS_RELEASE_BRANCH="true"
        #       break
        IS_RELEASE_BRANCH="false"
        for branch in $(echo "${{ inputs.release_branches }}" | tr ',' ' '); do
          if [[ "${{ github.ref_name }}" == $branch/* ]]; then
            IS_RELEASE_BRANCH="true"
            break
          fi
        done

        # Determine publishing conditions
        PUBLISH_TO_GHCR="false"
        PUBLISH_TO_GAR="false"

        # GHCR: Publish on default branch push, merge queue, release branches, OR PR (if enabled)
        if [[ "${{ inputs.ghcr }}" == "true" && (("$IS_DEFAULT_BRANCH" == "true") || ("${{ github.event_name }}" == "push" && "$IS_RELEASE_BRANCH" == "true") || ("${{ github.event_name }}" == "pull_request" && "${{ inputs.publish_on_pr }}" == "true")) ]]; then
          PUBLISH_TO_GHCR="true"
        fi

        # GAR: Publish on default branch push and merge queue
        if [[ "${{ inputs.google_ar }}" == "true" && (("$IS_DEFAULT_BRANCH" == "true") || ("${{ github.event_name }}" == "push" && "$IS_RELEASE_BRANCH" == "true") || ("${{ github.event_name }}" == "pull_request" && "${{ inputs.publish_on_pr }}" == "true")) ]]; then
          PUBLISH_TO_GAR="true"
        fi

        # Determine if we will publish to any registry
        WILL_PUBLISH="false"
        if [[ "$PUBLISH_TO_GHCR" == "true" || "$PUBLISH_TO_GAR" == "true" ]]; then
          WILL_PUBLISH="true"
        fi

        echo "publish_to_ghcr=$PUBLISH_TO_GHCR" >> $GITHUB_OUTPUT
        echo "publish_to_gar=$PUBLISH_TO_GAR" >> $GITHUB_OUTPUT
        echo "will_publish=$WILL_PUBLISH" >> $GITHUB_OUTPUT
        echo "is_default_branch=$IS_DEFAULT_BRANCH" >> $GITHUB_OUTPUT
        echo "Publishing to GHCR: $PUBLISH_TO_GHCR"
        echo "Publishing to GAR: $PUBLISH_TO_GAR"
        echo "Will publish to any registry: $WILL_PUBLISH"

        # Determine the correct commit SHA based on event type
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
        elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
          COMMIT_SHA="${{ github.event.merge_group.head_sha }}"
        else
          COMMIT_SHA="${{ github.sha }}"
        fi
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "Using commit SHA: $COMMIT_SHA"

    - name: Set up qemu
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 #v3.6.0
      with:
        platforms: ${{ inputs.platforms }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      with:
        platforms: ${{ inputs.platforms }}


    - name: Login to GHCR
      if: steps.setup.outputs.publish_to_ghcr == 'true'
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}


    - name: Setup Google Cloud authentication
      if: steps.setup.outputs.publish_to_gar == 'true'
      uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
      with:
        workload_identity_provider: ${{ inputs.google_workload_identity_provider }}
        service_account: ${{ inputs.google_service_account }}

    - name: Configure Docker for Google Artifact Registry
      if: steps.setup.outputs.publish_to_gar == 'true'
      shell: bash
      run: |
        gcloud auth configure-docker $(echo "${{ inputs.google_ar_image_name }}" | cut -d'/' -f1)

    - name: Extract metadata for GHCR
      id: meta-ghcr
      if: steps.setup.outputs.publish_to_ghcr == 'true'
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      with:
        images: ${{ steps.setup.outputs.ghcr_image_name }}
        tags: |
          # SHA for all events
          # Priority for sha tags is 2000, so it will be the highest priority. https://github.com/docker/metadata-action?tab=readme-ov-file#priority-attribute
          type=raw,value=${{ steps.setup.outputs.commit_sha }},prefix=${{ inputs.tag_prefix }},suffix=${{ inputs.tag_suffix }},priority=2000
          # set latest tag for default branch
          type=raw,value=latest,enable=${{ steps.setup.outputs.is_default_branch == 'true' && inputs.tag_latest == 'true' }}
          # Nightly tags only for default branch pushes and merge queue
          type=raw,value=nightly,enable=${{ steps.setup.outputs.is_default_branch == 'true' && inputs.tag_nightly == 'true' }}
        labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.vendor="Sentry"
            org.opencontainers.image.revision=${{ steps.setup.outputs.commit_sha }}
            org.opencontainers.image.version=${{ steps.setup.outputs.commit_sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}

    - name: Extract metadata for GAR
      id: meta-gar
      if: steps.setup.outputs.publish_to_gar == 'true'
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      with:
        images: ${{ inputs.google_ar_image_name }}
        tags: |
          # SHA for all events (no nightly for GAR)
          type=raw,value=${{ steps.setup.outputs.commit_sha }},prefix=${{ inputs.tag_prefix }},suffix=${{ inputs.tag_suffix }},priority=2000
          # set latest tag for default branch
          type=raw,value=latest,enable=${{ steps.setup.outputs.is_default_branch == 'true' && inputs.tag_latest == 'true' }}
        labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.vendor="Sentry"
            org.opencontainers.image.revision=${{ steps.setup.outputs.commit_sha }}
            org.opencontainers.image.version=${{ steps.setup.outputs.commit_sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}

    - name: Build and push
      id: build-and-push
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile_path }}
        platforms: ${{ inputs.platforms }}
        build-args: ${{ inputs.build_args }}
        target: ${{ inputs.build_target }}
        tags: |
          ${{ steps.setup.outputs.publish_to_ghcr == 'true' && steps.meta-ghcr.outputs.tags || '' }}
          ${{ steps.setup.outputs.publish_to_gar == 'true' && steps.meta-gar.outputs.tags || '' }}
          ${{ inputs.tags }}
        labels: ${{ (steps.setup.outputs.publish_to_ghcr == 'true' && steps.meta-ghcr.outputs.labels) || (steps.setup.outputs.publish_to_gar == 'true' && steps.meta-gar.outputs.labels) || '' }}
        annotations: ${{ (steps.setup.outputs.publish_to_ghcr == 'true' && steps.meta-ghcr.outputs.annotations) || (steps.setup.outputs.publish_to_gar == 'true' && steps.meta-gar.outputs.annotations) || '' }}
        cache-from: ${{ inputs.cache_from }}
        cache-to: ${{ steps.setup.outputs.will_publish == 'true' && inputs.cache_to || '' }}
        provenance: ${{ steps.setup.outputs.will_publish == 'true' && 'mode=max' || 'false' }}
        sbom: ${{ steps.setup.outputs.will_publish == 'true' }}
        push: ${{ steps.setup.outputs.will_publish == 'true' }}
        outputs: ${{ inputs.outputs }}

    - name: Output image URLs
      id: output-urls
      shell: bash
      run: |
        set -e

        primary_ghcr_tag=$(echo "${{ steps.meta-ghcr.outputs.tags }}" | head -n1)
        primary_gar_tag=$(echo "${{ steps.meta-gar.outputs.tags }}" | head -n1)

        ghcr_image_url="$primary_ghcr_tag"
        gar_image_url="$primary_gar_tag"

        # Output to GitHub Actions
        echo "ghcr_image_url=$ghcr_image_url" >> $GITHUB_OUTPUT
        echo "gar_image_url=$gar_image_url" >> $GITHUB_OUTPUT

        echo "GHCR Image URL: $ghcr_image_url"
        echo "GAR Image URL: $gar_image_url"
