name: 'Generate & Upload SBOM'
description: 'Generates SBOM for container images across multiple platforms and uploads them to Dependency Track'

inputs:
  image_name:
    description: 'Base image name'
    required: true

  platforms:
    description: 'Platforms to generate SBOM for (comma-separated)'
    required: true

  image_tags:
    description: 'Image tags to scan'
    required: true

  output_prefix:
    description: 'Prefix for output files'
    required: false
    default: 'sbom'

  # Dependency Track configuration
  dependency_track_hostname:
    description: 'Dependency-Track server hostname'
    required: false

  dependency_track_api_key:
    description: 'Dependency-Track API key'
    required: false

  dependency_track_project_name:
    description: 'Project name in Dependency-Track'
    required: false

  dependency_track_project_version:
    description: 'Project version in Dependency-Track'
    required: false

  dependency_track_auto_create:
    description: 'Automatically create project and version in Dependency-Track'
    required: false
    default: 'false'

  dependency_track_protocol:
    description: 'Dependency-Track protocol (http or https)'
    required: false
    default: 'https'

  dependency_track_port:
    description: 'Dependency-Track port'
    required: false
    default: '443'

  # Parent project configuration (optional)
  dependency_track_parent_name:
    description: 'Parent project name in Dependency-Track'
    required: false

  dependency_track_parent_version:
    description: 'Parent project version in Dependency-Track'
    required: false

  dependency_track_auto_create_parent:
    description: 'Automatically create parent project and version in Dependency-Track'
    required: false
    default: 'false'

outputs:
  sbom_files:
    description: 'Generated SBOM file paths'
    value: ${{ steps.generate.outputs.sbom_files }}

runs:
  using: 'composite'
  steps:
    - name: Generate SBOM for each platform
      id: generate
      env:
        IMAGE_NAME: ${{ inputs.image_name }}
        PLATFORMS: ${{ inputs.platforms }}
        IMAGE_TAGS: ${{ inputs.image_tags }}
        OUTPUT_PREFIX: ${{ inputs.output_prefix }}
      shell: bash
      run: |
        # Split platforms by comma and generate SBOM for each
        IFS=',' read -ra PLATFORM_ARRAY <<< "$PLATFORMS"
        
        sbom_files=""
        
        for platform in "${PLATFORM_ARRAY[@]}"; do
          # Clean up platform name for filename (replace / with -)
          platform_filename=$(echo "$platform" | tr '/' '-')
          
          # Generate filename
          filename="${OUTPUT_PREFIX}-${IMAGE_NAME}-${platform_filename}.cyclonedx.json"
          
          echo "Generating SBOM for platform: $platform"
          echo "Output file: $filename"
          
          # Generate SBOM for this platform
          docker scout sbom \
            --platform "$platform" \
            --format cyclonedx \
            --output "$filename" \
            "$IMAGE_TAGS"
          
          # Add to list of generated files
          if [[ -z "$sbom_files" ]]; then
            sbom_files="$filename"
          else
            sbom_files="$sbom_files,$filename"
          fi
        done
        
        echo "sbom_files=$sbom_files" >> $GITHUB_OUTPUT
        echo "Generated SBOM files: $sbom_files"

    - name: Upload SBOM files to Dependency Track
      if: inputs.dependency_track_hostname != '' && inputs.dependency_track_api_key != ''
      env:
        IMAGE_NAME: ${{ inputs.image_name }}
        PLATFORMS: ${{ inputs.platforms }}
        OUTPUT_PREFIX: ${{ inputs.output_prefix }}
        DT_HOSTNAME: ${{ inputs.dependency_track_hostname }}
        DT_API_KEY: ${{ inputs.dependency_track_api_key }}
        DT_PROJECT_NAME: ${{ inputs.dependency_track_project_name }}
        DT_PROJECT_VERSION: ${{ inputs.dependency_track_project_version }}
        DT_PROTOCOL: ${{ inputs.dependency_track_protocol }}
        DT_PORT: ${{ inputs.dependency_track_port }}
        DT_AUTO_CREATE: ${{ inputs.dependency_track_auto_create }}
        DT_PARENT_NAME: ${{ inputs.dependency_track_parent_name }}
        DT_PARENT_VERSION: ${{ inputs.dependency_track_parent_version }}
        DT_AUTO_CREATE_PARENT: ${{ inputs.dependency_track_auto_create_parent }}
      shell: bash
      run: |
        # Split platforms by comma and upload each SBOM
        IFS=',' read -ra PLATFORM_ARRAY <<< "$PLATFORMS"
        
        for platform in "${PLATFORM_ARRAY[@]}"; do
          # Clean up platform name for filename (replace / with -)
          platform_filename=$(echo "$platform" | tr '/' '-')
          
          # Generate filename
          filename="${OUTPUT_PREFIX}-${IMAGE_NAME}-${platform_filename}.cyclonedx.json"
          
          echo "Uploading SBOM for platform: $platform"
          echo "File: $filename"
          
          if [[ -f "$filename" ]]; then
            echo "Uploading $filename to Dependency Track..."
            
            # Construct the project name with platform suffix
            project_name="${DT_PROJECT_NAME}"
            if [[ "$DT_PROJECT_NAME" != "" ]]; then
              project_name="${DT_PROJECT_NAME}-${platform_filename}"
            fi
            
            # Upload using curl to Dependency Track API
            # First, create or get the parent project if specified
            parent_uuid=""
            if [[ "$DT_PARENT_NAME" != "" && "$DT_PARENT_VERSION" != "" ]]; then
              echo "Setting up parent project: $DT_PARENT_NAME:$DT_PARENT_VERSION"
              
              # Check if parent project exists
              parent_response=$(curl -s -w "%{http_code}" -X GET \
                -H "X-API-Key: ${DT_API_KEY}" \
                "${DT_PROTOCOL}://${DT_HOSTNAME}:${DT_PORT}/api/v1/project/lookup?name=${DT_PARENT_NAME}&version=${DT_PARENT_VERSION}" \
                -o /tmp/parent_lookup.json)
              
              if [[ "$parent_response" == "200" ]]; then
                parent_uuid=$(jq -r '.uuid' /tmp/parent_lookup.json)
                echo "Found existing parent project: $parent_uuid"
              elif [[ "$DT_AUTO_CREATE_PARENT" == "true" ]]; then
                echo "Creating parent project..."
                parent_create_response=$(curl -s -w "%{http_code}" -X PUT \
                  -H "X-API-Key: ${DT_API_KEY}" \
                  -H "Content-Type: application/json" \
                  -d "{\"name\":\"${DT_PARENT_NAME}\",\"version\":\"${DT_PARENT_VERSION}\"}" \
                  "${DT_PROTOCOL}://${DT_HOSTNAME}:${DT_PORT}/api/v1/project" \
                  -o /tmp/parent_create.json)
                
                if [[ "$parent_create_response" == "200" || "$parent_create_response" == "201" ]]; then
                  parent_uuid=$(jq -r '.uuid' /tmp/parent_create.json)
                  echo "Created parent project: $parent_uuid"
                else
                  echo "Failed to create parent project. HTTP status: $parent_create_response"
                  cat /tmp/parent_create.json
                fi
              fi
            fi
            
            # Upload the SBOM file
            upload_url="${DT_PROTOCOL}://${DT_HOSTNAME}:${DT_PORT}/api/v1/bom"
            if [[ "$parent_uuid" != "" ]]; then
              upload_url="${upload_url}?parentUUID=${parent_uuid}"
            fi
            
            response=$(curl -s -w "%{http_code}" -X POST \
              -H "X-API-Key: ${DT_API_KEY}" \
              -H "Content-Type: application/vnd.cyclonedx+json" \
              --data-binary "@${filename}" \
              "$upload_url" \
              -o /tmp/upload_response.json)
            
            if [[ "$response" == "200" || "$response" == "201" ]]; then
              echo "Successfully uploaded $filename to Dependency Track"
              if [[ "$parent_uuid" != "" ]]; then
                echo "Uploaded as child project under parent: $parent_uuid"
              fi
            else
              echo "Failed to upload $filename to Dependency Track. HTTP status: $response"
              cat /tmp/upload_response.json
            fi
          else
            echo "Warning: SBOM file $filename not found"
          fi
        done

    - name: Upload SBOM files as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scout-sbom
        path: ${{ steps.generate.outputs.sbom_files }} 